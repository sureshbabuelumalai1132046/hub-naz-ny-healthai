name: 'Update Cluster Policy Name to ID'
description: 'Parses through a Databricks Job Config JSON and updates the cluster policy name to ID'

inputs:
  set-up-databricks-cli:
    description: 'Set up Databricks CLI'
    default: 'true'
    required: false
  databricks-hostname:
    description: 'The Databricks URL where the cluster policy exists'
    required: false
  databricks-token:
    description: 'The Databricks Token for Authentication'
    required: false
  job-json-file-path:
    description: 'Databricks job config JSON path'
    required: true
  fail-on-missing-policy:
    description: 'Fail action if policy is not found'
    default: 'true'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Set Up Databricks CLI
      if: "${{ inputs.set-up-databricks-cli == 'true' }}"
      run: |
        echo "Checking if input variables are set"
        if [[ -z "${{ inputs.databricks-hostname }}" ]]; then
          echo "databricks-hostname is not set. Please set it to configure Databricks CLI."
          exit 1
        fi
        if [[ -z "${{ inputs.databricks-token }}" ]]; then
          echo "databricks-token is not set. Please set it to configure Databricks CLI."
          exit 1
        fi
        echo '[DEFAULT]
        host = ${{ inputs.databricks-hostname }}
        token = ${{ inputs.databricks-token }}' > ~/.databrickscfg
        python -m pip install databricks-cli==0.17.4
      shell: bash

    - name: Update Cluster Policy Name to ID
      run: |
        if [[ "${{ inputs.fail-on-missing-policy }}" == "true" ]]; then
          python $GITHUB_ACTION_PATH/get_policy.py --job-path ${{ inputs.job-json-file-path }} --fail-on-missing-policy
        else
          python $GITHUB_ACTION_PATH/get_policy.py --job-path ${{ inputs.job-json-file-path }}
        fi
      shell: bash
